{"name":"Lion CSS UI Kit","tagline":"For web designers wanting to prototype native apps for Mac OS X Lion.","body":"<img id=\"screenshot\" src=\"img/lion-css-ui-kit.png\" alt=\"\">\r\n\r\n# <img src=\"img/icon.png\" alt=\"\"> Lion CSS UI Kit\r\n\r\nFor web designers wanting to prototype native apps for Mac OS X.\r\n\r\n[Download the kit](https://github.com/sakamies/Lion-CSS-UI-Kit/zipball/master)\r\n[Fork on Github](https://github.com/sakamies/Lion-CSS-UI-Kit/)\r\n\r\n## Feedback\r\n\r\nAny input would be greatly appreciated.\r\n\r\nTweet to [@sakamies](http://twitter.com/sakamies)\r\nEmail [sakamies@gmail.com](mailto:sakamies@gmail.com)\r\n\r\n## Compatibility\r\n\r\nThe kit is based on Xcode components on OS X Lion. Since the kit is for prototyping OS X apps, it's mainly made for Webkit, but should work mostly fine in any browser that supports gradients and flexboxes.\r\n\r\n## Usage\r\n\r\nCopy &amp; paste is your friend. The html is just form elements with classes, and simple containers for any multi-part controls.\r\n\r\nThe selection in lists and segmented controls are handled with radio buttons. Disclosure triangles are checkboxes styled using <code>-webkit-appearance: none;</code> The source list should probably be handled with javascript, so expect it to change in the near future.</p>\r\n\r\nMost of the styles are not tied to any context, so you can just apply a class to style an element in any way you wish. The classes are named after the actual component names in Xcode.\r\n\r\n------\r\n\r\n[Ville V. Vanninen](http://pumpula.net) / [Workflower](http://workflower.fi) / [Foolproof.me](http://foolproof.me)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}